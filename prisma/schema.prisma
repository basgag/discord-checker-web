generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DiscordAccount {
  id            String         @id @unique
  username      String
  discriminator String
  avatar        String?
  email         String?
  verified      Boolean?
  accent_color  Int?
  banner        String?
  bot           Boolean?
  flags         Int?
  global_name   String?
  locale        String?
  mfa_enabled   Boolean?
  premium_type  Int?
  public_flags  Int?
  system        Boolean?
  phone         String?
  nsfw_allowed  Boolean?
  bio           String?
  banner_color  String?
  tokens        DiscordToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model DiscordToken {
  id               String         @id @unique @default(cuid())
  value            String         @unique
  origin           String?
  lastCheckedAt    DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  DiscordAccount   DiscordAccount @relation(fields: [discordAccountId], references: [id], onDelete: Cascade)
  discordAccountId String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
