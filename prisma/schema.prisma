generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model DiscordAccount {
  id                String         @id @unique
  username          String         @db.VarChar(32)
  password          String?
  discriminator     String         @db.VarChar(4)
  global_name       String?        @db.VarChar(32)
  avatar            String?
  avatar_decoration String?
  email             String?        @db.VarChar(254)
  verified          Boolean?
  accent_color      Int?
  banner            String?
  bot               Boolean?
  flags             BigInt?
  locale            String?
  mfa_enabled       Boolean?
  premium_type      Int?
  public_flags      BigInt?
  system            Boolean?
  phone             String?
  nsfw_allowed      Boolean?
  bio               String?        @db.VarChar(190)
  banner_color      String?
  tokens            DiscordToken[]
  owned_guilds      DiscordGuild[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model DiscordGuild {
  id                         String          @id @unique
  owner_id                   String?
  name                       String
  description                String?
  icon                       String?
  splash                     String?
  discovery_splash           String?
  features                   String[]
  approximate_member_count   Int?
  approximate_presence_count Int?
  owner                      DiscordAccount? @relation(fields: [owner_id], references: [id], onDelete: SetNull)
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt
}

model DiscordToken {
  id               String         @id @default(cuid())
  discordAccountId String
  value            String         @unique
  origin           String?
  discordAccount   DiscordAccount @relation(fields: [discordAccountId], references: [id], onDelete: Cascade)
  lastCheckedAt    DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  permissions   Int       @default(0)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
